<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
	<info>
		<title>Helló, Mandelbrot!</title>
		<keywordset>
			<keyword/>
		</keywordset>
	</info>
	<section>
		<title>EPAM: Neptun tantárgyfelvétel modellezése UML-ben</title>
		<para>
			<informalfigure>
				<graphic fileref="images/fc2bf2ff.png"></graphic>
			</informalfigure>
		</para>
	</section>
	<section>
		<title>EPAM: Neptun tantárgyfelvétel UML diagram implementálása</title>
		<para></para>
	</section>
	<section>
		<title>EPAM: OO modellezés</title>
		<para>
			OO modellezés során többféle megközelítés lehetséges. A cél általában mindig a flexibilitás fenntartása, felesleges komplexitás és technical debt hozzáadásának elkerülésével. Erre kitaláltak már korábban pár elvet, vegyük is őket sorra!
		</para>
		<para>
			<emphasis>YAGNI:</emphasis> Rövidítése a "you aint gonna need it" kifejezésnek, azaz hogy "nem lesz rá szükséged". Célja az overengineering megfékezése azáltal, hogy elgondolkodtat arról, valóban szükségünk van-e egy adott absztrakcióra, vagy ráér-e még később. Természetéből adódóan ez szükségszerűvé teszi pl. a folytonos refaktorálás, a folytonos unit tesztelést és a folytonos integrációt. Nem megfelelően alkalmazva könnyedén okozhat kaotikus kódbázist, és nagy technical debtet.
		</para>
		<para>
			<emphasis>DRY:</emphasis> Rövidítése a "don't repeat yourself"-nek, azaz hogy "ne ismételd magad". Célja a kód duplikáció minimalizálása, és az ezek miatt kialakuló bugok elkerülése.
		</para>
	</section>
</chapter>