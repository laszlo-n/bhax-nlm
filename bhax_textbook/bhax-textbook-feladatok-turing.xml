<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása: /bhax_sources/fejezet2/vegtelen_ciklus_1szal.c; /bhax_sources/fejezet2/vegtelen_ciklus_sokszal.c; /bhax_sources/fejezet2/vegtelen_ciklus_noload.c
        </para>
        <para>
            Látható, hogy alapból a leforduló C programok 1 szálon futnak. Amikor végtelen ciklust indítok, azonnal gőzerővel elkezdte darálni az ütemező által épp szabadnak ítélt magot. Az OpenMP könyvtár segítségével megoldható az is viszont, hogy több szálat terheljen a vezérlés. Ekkor egyszerre minden elérhető magot terhel a ciklus. A ciklus extrém processzorterhelése megelőzhető a polling lelassításával, pl. a példakódban használt sleep(1) segítségével. Ez az adott szálat kisorolja az átadott időtartamig.
        </para>
    </section>
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?

            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>

            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Ez a pszeudokód Turing megállási problémáját mutatja be. Ez példázza hogy egy Turing gép sosem lesz képes megmondani, hogy egy másik Turing gép megáll-e vagy végtelen ciklusba kerül, mert logikai ellentmondásba kerülne menet közben. Ha egy ilyen gépnek átadjuk a saját kódját, azt fogja mondani hogy nem áll meg, de ez nem lehetséges, hisz azzal hogy ezt megmondta, megállt.
        </para>
    </section>

    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: /bhax_sources/fejezet2/valtozocsere.c
        </para>
        <para>
            A cserélendő változók ábrázolása lehetővé teszi ezt a fajta cserét. Az aritmetikai rész nem igényel további dokumentációt, sima matek, ld. kommentek a kódban.
        </para>
    </section>
    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása: /bhax_sources/fejezet2/labda_iffel.c; /bhax_sources/fejezet2/labda_ifnelkul.c
        </para>
        <para>
            Az eredeti forrás egyszerű: boundary checkinget hajtunk végre minden draw után. Az ncurses segítségével felvesszük a konzolablak teljes méretét, lehelyezünk egy O-t egy koordinátára, várunk, mozgatjuk az O-t, boundary checkelünk ifekkel, majd minden megy előről. A feltételek megnézik, hogy balról, jobbról, felülről és alulról elérte-e már a "labda" az ablak szélét, és ez alapján negálja a mozgatásra használt "vektorok" irányát.
        </para>
        <para>
            Az if mentes módszer a C-ben való osztás tulajdonságát abuse-olja. Megnézi hogy milyen távolságra van a két széltől egy adott irányban (x vagy y), de mivel ez egészt ad vissza, így mindig 0 vagy 1 lesz az eredmény. A két részt összeadva (a labda előtti rész, és a labda utáni rész) megmutatja, hogy ha elértük az egyik szélt. 1 értéket vesz fel, ha szélen vagyunk, 0-t ha bárhol máshol. -1-et ezzel hatványra emelve megkapjuk, hogy mennyivel szorozzuk meg a mozgatóvektort. -1 a nulladikon az 1, így a mozgatóvektor 1-gyel lesz szorozva, azaz nem változik. -1 az elsőn viszont már -1, így a mozgatóvektort ezzel szorozva a negáltjára fordul, a labda mozgásának az iránya megfordul. Így már működik.
        </para>
    </section>
    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában!
        </para>
        <para>
            Megoldás forrása: /bhax_sources/fejezet2/szohossz.c
        </para>
        <para>
            Ahogy a kód alapján is látható, lesz két változónk: egy hossz nevű, amiben számoljuk a biteket, és egy pivot nevű, amiben egy ún. jelzőbitet helyezünk el, a legalacsonyabb helyiértéken (hex: 0x1 == dec: 1). Az utótesztelős (do-while) ciklus először leszámolja a pivot elemet, ami létezik, tehát 1 bitet már biztos tárol az int - majd loopba lép.
        </para>
        <para>
            A ciklusfej a BogoMIPS-ben hivatkozott részen alapul. A trükk a <![CDATA[<<=]]> operátorban rejlik. Amit csinál, igazából nem is olyan bonyolult: balra bitshifteli a változó tartalmát, jelen esetben 1-gyel (ld. a kód). Így a jelzőbit fokozatosan "le fog csúszni" balra. Eközben egyre nagyobb értéket vesz fel a módosított változó - de mivel C-ben a 0 hamist, bármi más pedig igazt jelöl, a ciklus tovább robog. Amint "leesik" a jelzőbit a bal oldalon viszont, a változó értéke 0 lesz, és a ciklus terminál. Így le tudjuk számolni a szóhosszt, hisz az int 1 szó hosszú.
        </para>
    </section>
    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás forrása: /bhax_sources/fejezet2/pagerank.c
        </para>
        <para>
            A PageRank algoritmus 1:1 implementálása a diasori példa alapján. 4 oldal egymásra mutató linkjeinek száma alapján (kifelé mutató linkek száma, saját magára mutató linkek száma) alapján súly lesz az adott oldalhoz linkelve, mátrixműveletek segítségével.
        </para>
    </section>
    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>Először lássuk az előre elkészített kódot!</para>
        <programlisting language="R"><![CDATA[library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]></programlisting>
        <para>
            Vegyük sorra mi mit csinál! Először is létrehozunk egy stp nevű függvényt, mely egy tetszőleges x számig kiszámolja a Brun-konstans értékét. Ez a következőképp történik:

            <itemizedlist>
                <listitem>
                    <para>eltárolja a prímeket x-ig</para>
                </listitem>
                <listitem>
                    <para>minden prímet kivon a rákövetkezőből, és ezeket a különbségeket eltárolja</para>
                </listitem>
                <listitem>
                    <para>minden olyan esetnek ahol a különbség 2 volt, kimenti az indexét</para>
                </listitem>
                <listitem>
                    <para>ezzel előállítja a t1primes és t2primes vektort, amiben az ikerprímeket helyezi el, az idx indexű prímek és az idx indexű prímek + 2 (ami mindig egy másik prím lesz) segítségével</para>
                </listitem>
                <listitem>
                    <para>képez egy vektort felhasználva az előbb említett 2 vektort, azokra reciprok és páronkénti összeadást alkalmazva</para>
                </listitem>
                <listitem>
                    <para>visszaadja az összegét ennek a vektornak</para>
                </listitem>
            </itemizedlist>

            Ezt követően arbitrary steppinggel megáll pár x értéknél, és kiszámolja a Brun-konstans értékét addig a pontig, majd plotolja. Látható hogy az értékek valóban konstans értékhez tartanak.
        </para>
    </section>
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            A Monty Hall probléma rendkívül híres, a valószínűségszámítás sajátosságait jól demózó probléma. Az alapprobléma a következő. van 3 ajtó, az egyik mögött pedig a főnyeremény (a többi mögött meg egy-egy kecske). Elsőkörben választunk egy ajtót, ami mögött valószínűnek érezzük a főnyereményt. Ekkor a helyes döntés esélye 1/3. Ezután a játékvezető kinyit egy (1) ajtót. Amennyiben nem a főnyeremény volt mögötte, dönthetünk: a megmaradt két ajtó közül maradunk annál, amit az első körben kiválasztottunk, vagy cserélünk a másikra.
        </para>
        <para>
            A helyes döntés mindig cserélni; ekkor kétszer nagyobb esélyünk lesz a nyerésre. A gondolatmenet a következő: mikor először választunk ajtót, 1/3 esély van arra, hogy mögötte lesz a főnyeremény, 2/3 arra hogy a másik két ajtó közül valamelyik mögött. Amikor a játékvezető kinyit azok közül egyet, és nem a főnyeremény volt mögötte, az esélye 0%-ra nő, míg a másiké 100%-ra, azaz a két ajtóra eső valószínűség (2/3) 100%-át (egészét) birtokolja az az ajtó. Így tehát annak a másik nyitott ajtónak 2/3 eséllyel lehet a főnyeremény mögötte, míg az általunk választottnak továbbra is 1/3-dal, tehát érdemesebb arra váltani.
        </para>
        <para>
            Statisztikai szimulációval ezt könnyen be lehet látni, ld. a hivatkozott kód.
        </para>
    </section>
</chapter>
